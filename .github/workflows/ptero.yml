name: Continuous Persistent VPS with Pterodactyl (15-Min Test)

on:
  workflow_dispatch:

jobs:
  vps-session:
    runs-on: ubuntu-latest
    timeout-minutes: 25 # Set to 25 mins for a short test run

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download VPS backup
        uses: actions/download-artifact@v4
        with:
          name: vps-backup
          path: ./backup
        continue-on-error: true

      - name: Restore backup files
        id: restore
        run: |
          if [ -f ./backup/backup.zip ]; then
            sudo unzip -o ./backup/backup.zip -d /
            echo "âœ… Backup restored successfully."
            echo "cache-hit=true" >> $GITHUB_OUTPUT
          else
            echo "ðŸ§Š No backup found, starting fresh install."
            echo "cache-hit=false" >> $GITHUB_OUTPUT
          fi

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip sudo software-properties-common ca-certificates apt-transport-https
          # Install PHP, Nginx, MariaDB, Redis, etc.
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt-get update
          sudo apt-get install -y nginx mariadb-server redis-server
          sudo apt-get install -y php8.2 php8.2-cli php8.2-gd php8.2-mysql php8.2-pdo php8.2-mbstring php8.2-tokenizer php8.2-bcmath php8.2-xml php8.2-fpm php8.2-curl php8.2-zip
          # Install Composer
          curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer

      - name: Start and Restore Services
        run: |
          # Start services
          sudo systemctl start nginx mariadb redis-server
          
          # Restore Tailscale state if it exists
          if [ -f /opt/vps-backup/data/tailscaled.state ]; then
            sudo mkdir -p /var/lib/tailscale
            sudo cp /opt/vps-backup/data/tailscaled.state /var/lib/tailscale/tailscaled.state
            sudo chmod 600 /var/lib/tailscale/tailscaled.state
          fi
          
          # Restore Database if it exists
          if [ -f /opt/vps-backup/data/pterodactyl.sql ]; then
            sudo mysql -e "CREATE DATABASE IF NOT EXISTS pterodactyl;"
            sudo mysql pterodactyl < /opt/vps-backup/data/pterodactyl.sql
            echo "âœ… Database restored."
          fi

      - name: Install Tailscale Client
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Connect to Tailscale
        run: |
          sudo hostnamectl set-hostname neonh0st
          sudo tailscaled &
          sleep 5
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=neonh0st || echo "Tailscale already up"

          # Wait for a valid IP address
          until sudo tailscale ip -4 | grep -qE '^([0-9]{1,3}\.){3}[0-9]{1,3}$'; do
            echo "Waiting for Tailscale IP..."
            sleep 5
          done
          echo "Tailscale IP is ready: $(tailscale ip -4)"

      - name: Pterodactyl Panel Installation (First Run Only)
        if: steps.restore.outputs.cache-hit == 'false'
        run: |
          echo "ðŸš€ Starting Pterodactyl fresh installation..."
          DB_PASSWORD=$(openssl rand -base64 16 | tr -d "=\/\+")
          TAILSCALE_IP=$(sudo tailscale ip -4)

          # 1. Setup MariaDB
          sudo mysql -e "CREATE USER 'pterodactyl'@'127.0.0.1' IDENTIFIED BY '${DB_PASSWORD}';"
          sudo mysql -e "CREATE DATABASE pterodactyl;"
          sudo mysql -e "GRANT ALL PRIVILEGES ON pterodactyl.* TO 'pterodactyl'@'127.0.0.1' WITH GRANT OPTION;"
          
          # 2. Download and configure Pterodactyl
          sudo mkdir -p /var/www/pterodactyl
          cd /var/www/pterodactyl
          sudo curl -Lo panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz
          sudo tar -xzvf panel.tar.gz
          sudo rm -f panel.tar.gz
          sudo cp .env.example .env
          
          # 3. Run Composer
          sudo composer install --no-dev --optimize-autoloader
          
          # 4. Run Artisan setup commands
          sudo php artisan key:generate --force
          sudo php artisan p:environment:setup -n --author=admin@example.com --url=http://${TAILSCALE_IP} --cache=redis --session=redis --queue=redis --redis-host=127.0.0.1 --redis-port=6379
          sudo php artisan p:environment:database -n --host=127.0.0.1 --port=3306 --database=pterodactyl --username=pterodactyl --password=${DB_PASSWORD}
          sudo php artisan migrate --seed --force
          
          # 5. Create the admin user 'neonh0st'
          sudo php artisan p:user:make --admin=1 --username=neonh0st --email=admin@example.com --name-first=Admin --name-last=User --password=neonh0st
          
          # 6. Set permissions and configure webserver
          sudo chown -R www-data:www-data /var/www/pterodactyl/*
          
      - name: Install SSH and Configure Webserver
        run: |
          sudo apt-get install -y openssh-server
          sudo systemctl start ssh
          sudo sh -c 'cat > /etc/nginx/sites-available/pterodactyl.conf <<EOL
          server {
              listen 80;
              server_name $(tailscale ip -4);
              root /var/www/pterodactyl/public;
              index index.html index.htm index.php;
              charset utf-8;
              location / {
                  try_files \$uri \$uri/ /index.php?\$query_string;
              }
              location = /favicon.ico { access_log off; log_not_found off; }
              location = /robots.txt  { access_log off; log_not_found off; }
              access_log  /var/log/nginx/pterodactyl.app-access.log;
              error_log   /var/log/nginx/pterodactyl.app-error.log error;
              location ~ \.php$ {
                  fastcgi_split_path_info ^(.+\.php)(/.+)$;
                  fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
                  fastcgi_index index.php;
                  include fastcgi_params;
                  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                  fastcgi_param HTTP_PROXY "";
                  fastcgi_intercept_errors off;
                  fastcgi_buffer_size 16k;
                  fastcgi_buffers 4 16k;
              }
              location ~ /\.ht {
                  deny all;
              }
          }
          EOL'
          sudo ln -s /etc/nginx/sites-available/pterodactyl.conf /etc/nginx/sites-enabled/pterodactyl.conf
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t
          sudo systemctl restart nginx

      - name: Create VPS User
        run: |
          if ! id -u neonh0st >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash neonh0st
            echo "neonh0st:neonh0st" | sudo chpasswd
            sudo usermod -aG sudo neonh0st
            echo "neonh0st ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudo
