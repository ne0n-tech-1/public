name: Continuous Persistent VPS

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:

jobs:
  vps-session:
    runs-on: ubuntu-latest
    timeout-minutes: 350  # Just under 6 hours to allow for job completion

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set hostname to toknless
        run: sudo hostnamectl set-hostname toknless

      - name: Download VPS backup (if any)
        uses: actions/download-artifact@v4
        with:
          name: vps-backup
          path: ./backup
        continue-on-error: true

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y curl unzip sudo net-tools neofetch software-properties-common ca-certificates apt-transport-https mariadb-server redis-server
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt update
          sudo apt install -y php8.2 php8.2-cli php8.2-gd php8.2-mysql php8.2-pdo php8.2-mbstring php8.2-tokenizer php8.2-bcmath php8.2-xml php8.2-fpm php8.2-curl php8.2-zip nginx
          sudo apt install -y docker.io openssh-server
          sudo systemctl enable --now docker

      - name: Install Pterodactyl Wings prerequisites
        run: |
          sudo mkdir -p /etc/pterodactyl
          sudo curl -L -o /usr/local/bin/wings "https://github.com/pterodactyl/wings/releases/latest/download/wings_linux_$([[ "$(uname -m)" == "x86_64" ]] && echo "amd64" || echo "arm64")"
          sudo chmod u+x /usr/local/bin/wings

      - name: Restore backup files and start services
        id: restore
        run: |
          if [ -f ./backup/backup.zip ]; then
            sudo unzip -o ./backup/backup.zip -d /
            sudo systemctl start nginx mariadb redis-server
            echo "✅ Backup restored successfully."
            echo "cache-hit=true" >> $GITHUB_OUTPUT
          else
            echo "🧊 No backup found, starting fresh install."
            sudo systemctl start mariadb redis-server
            echo "cache-hit=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Composer
        if: steps.restore.outputs.cache-hit == 'false'
        run: curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer

      - name: Install Tailscale client
        run: curl -fsSL https://tailscale.com/install.sh | sh

      - name: Connect to Tailscale
        run: |
          sudo tailscaled &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=toknless || echo "Tailscale already up"
          
          until sudo tailscale ip -4 | grep -qE '^([0-9]{1,3}\.){3}[0-9]{1,3}$'; do
            echo "Waiting for Tailscale IP..."
            sleep 5
          done

      - name: Full Pterodactyl Installation (First Run Only)
        if: steps.restore.outputs.cache-hit == 'false'
        run: |
          echo "🚀 Starting Pterodactyl fresh installation..."
          TAILSCALE_IP=$(sudo tailscale ip -4)
          DB_PASSWORD=$(openssl rand -base64 16 | tr -d "=\/\+")
          ADMIN_PASS=toknless

          # 1. Setup MariaDB for Panel
          sudo mysql -e "CREATE USER 'pterodactyl'@'127.0.0.1' IDENTIFIED BY '${DB_PASSWORD}';"
          sudo mysql -e "CREATE DATABASE pterodactyl;"
          sudo mysql -e "GRANT ALL PRIVILEGES ON pterodactyl.* TO 'pterodactyl'@'127.0.0.1' WITH GRANT OPTION;"
          
          # 2. Download and configure Pterodactyl Panel
          sudo mkdir -p /var/www/pterodactyl
          cd /var/www/pterodactyl
          sudo curl -Lo panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz
          sudo tar -xzvf panel.tar.gz
          sudo rm -f panel.tar.gz
          sudo cp .env.example .env
          sudo composer install --no-dev --optimize-autoloader
          
          # 3. Run Artisan setup commands
          sudo php artisan key:generate --force
          sudo php artisan p:environment:setup -n --author=admin@example.com --url=http://${TAILSCALE_IP} --cache=redis --session=redis --queue=redis --redis-host=127.0.0.1 --redis-port=6379
          sudo php artisan p:environment:database -n --host=127.0.0.1 --port=3306 --database=pterodactyl --username=pterodactyl --password=${DB_PASSWORD}
          sudo php artisan migrate --seed --force
          sudo php artisan p:user:make --admin=1 --username=toknless --email=admin@example.com --name-first=Admin --name-last=User --password=${ADMIN_PASS}
          
          # 4. Configure Webserver (Nginx) for Panel
          sudo sh -c 'cat > /etc/nginx/sites-available/pterodactyl.conf <<EOL
          server {
              listen 80;
              server_name '"$TAILSCALE_IP"';
              root /var/www/pterodactyl/public;
              index index.html index.htm index.php;
              charset utf-8;
              location / { try_files \$uri \$uri/ /index.php?\$query_string; }
              location = /favicon.ico { access_log off; log_not_found off; }
              location = /robots.txt  { access_log off; log_not_found off; }
              access_log  /var/log/nginx/pterodactyl.app-access.log;
              error_log   /var/log/nginx/pterodactyl.app-error.log error;
              location ~ \.php$ {
                  fastcgi_split_path_info ^(.+\.php)(/.+)$;
                  fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
                  fastcgi_index index.php;
                  include fastcgi_params;
                  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                  fastcgi_param HTTP_PROXY "";
                  fastcgi_intercept_errors off;
                  fastcgi_buffer_size 16k;
                  fastcgi_buffers 4 16k;
              }
              location ~ /\.ht { deny all; }
          }
          EOL'
          sudo ln -s /etc/nginx/sites-available/pterodactyl.conf /etc/nginx/sites-enabled/pterodactyl.conf
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t
          sudo systemctl restart nginx
          
          # 5. Create Wings Configuration (node auto-discovery)
          sudo php artisan p:remote:list
          sudo php artisan p:node:list
          
          # 6. Create Wings node
          read -p "Enter node name (e.g., node1): " WINGS_NODE_NAME
          read -p "Enter node location ID (e.g., 1): " WINGS_LOCATION_ID
          sudo php artisan p:node:make --name=${WINGS_NODE_NAME} --location-id=${WINGS_LOCATION_ID} --fqdn=http://${TAILSCALE_IP} --daemon-sftp-port=2022 --daemon-listen-port=8080 --no-ssl
          sudo php artisan p:node:list
          
          # 7. Get Wings configuration token and configure Wings
          read -p "Enter node ID: " WINGS_NODE_ID
          WINGS_TOKEN=$(sudo php artisan p:node:token ${WINGS_NODE_ID} | tail -n 1)
          sudo mkdir -p /etc/pterodactyl/
          sudo curl -L -o /etc/pterodactyl/config.yml http://${TAILSCALE_IP}:8080/api/nodes/${WINGS_TOKEN}/configuration
          
          # 8. Start Wings and set correct permissions
          sudo chown -R www-data:www-data /var/www/pterodactyl/*
          sudo /usr/local/bin/wings --config /etc/pterodactyl/config.yml &

      - name: Create user toknless with sudo
        run: |
          if ! id -u toknless >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash toknless
            echo "toknless:toknless" | sudo chpasswd
            sudo usermod -aG sudo toknless
            echo "toknless ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/toknless
          fi

      - name: Show connection info
        run: |
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "✅ VPS is running!"
          echo "----------------------------------------"
          echo "🔗 Tailscale IP: ${TAILSCALE_IP}"
          echo "➡️ SSH User: toknless"
          echo "➡️ SSH Pass: toknless"
          echo "---"
          echo "➡️ Pterodactyl Panel URL: http://${TAILSCALE_IP}"
          echo "➡️ Pterodactyl User: toknless"
          echo "➡️ Pterodactyl Pass: toknless"
          echo "----------------------------------------"

      - name: Keep VPS alive
        run: sleep 20700  # 5 hours 45 minutes

      - name: Backup VPS data
        run: |
          echo "💾 Starting backup process..."
          sudo mkdir -p /opt/vps-backup/data
          
          # Backup Pterodactyl Panel data and database
          if [ -d /var/www/pterodactyl ]; then
            sudo rsync -a --delete /var/www/pterodactyl /opt/vps-backup/data/
            DB_PASS=$(grep '^DB_PASSWORD=' /var/www/pterodactyl/.env | cut -d'=' -f2 | sed "s/['\"]//g")
            sudo mysqldump pterodactyl --user=pterodactyl --password="${DB_PASS}" > /opt/vps-backup/data/pterodactyl.sql
          fi
          
          # Backup Pterodactyl Wings config
          if [ -d /etc/pterodactyl/wings ]; then
            sudo rsync -a --delete /etc/pterodactyl/wings /opt/vps-backup/data/
          fi
          
          # Backup Tailscale state
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            sudo cp /var/lib/tailscale/tailscaled.state /opt/vps-backup/data/
          fi
          
          # Package the backup
          sudo chown -R $USER:$USER /opt/vps-backup
          zip -r backup.zip /opt/vps-backup

      - name: Upload VPS backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup
          path: backup.zip
          retention-days: 1
