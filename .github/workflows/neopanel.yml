name: Continuous Persistent VPS

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:

jobs:
  vps-session:
    runs-on: ubuntu-latest
    timeout-minutes: 350

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set hostname
        run: sudo hostnamectl set-hostname toknless

      - name: Download VPS backup (if any)
        uses: actions/download-artifact@v4
        with:
          name: vps-backup
          path: ./backup
        continue-on-error: true

      - name: Install base system dependencies
        run: |
          sudo apt update
          sudo apt install -y curl unzip sudo net-tools neofetch software-properties-common ca-certificates apt-transport-https mariadb-server redis-server
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt update
          sudo apt install -y php8.2 php8.2-cli php8.2-gd php8.2-mysql php8.2-pdo php8.2-mbstring php8.2-tokenizer php8.2-bcmath php8.2-xml php8.2-fpm php8.2-curl php8.2-zip nginx
          sudo apt install -y openssh-server

      - name: Install Docker and Pterodactyl Wings prerequisites
        run: |
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          
          sudo mkdir -p /etc/pterodactyl
          sudo curl -L -o /usr/local/bin/wings "https://github.com/pterodactyl/wings/releases/latest/download/wings_linux_$([[ "$(uname -m)" == "x86_64" ]] && echo "amd64" || echo "arm64")"
          sudo chmod u+x /usr/local/bin/wings
          sudo systemctl enable --now docker

      - name: Restore backup files and start services
        id: restore
        run: |
          if [ -f ./backup/backup.zip ]; then
            sudo unzip -o ./backup/backup.zip -d /
            sudo systemctl start nginx mariadb redis-server
            echo "âœ… Backup restored successfully."
            echo "cache-hit=true" >> $GITHUB_OUTPUT
          else
            echo "ðŸ§Š No backup found, starting fresh install."
            sudo systemctl start mariadb redis-server
            echo "cache-hit=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Tailscale client
        run: curl -fsSL https://tailscale.com/install.sh | sh

      - name: Connect to Tailscale with constant IPs
        run: |
          sudo tailscaled &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=toknless || echo "Tailscale already up"
          
          # Assign constant IPs for panel and node
          sudo ip addr add 100.100.100.10 dev tailscale0 || true
          sudo ip addr add 100.100.100.11 dev tailscale0 || true
          
          echo "PANEL_IP=100.100.100.10" >> $GITHUB_ENV
          echo "NODE_IP=100.100.100.11" >> $GITHUB_ENV

      - name: Full Pterodactyl Installation (First Run Only)
        if: steps.restore.outputs.cache-hit == 'false'
        run: |
          echo "ðŸš€ Starting Pterodactyl fresh installation..."
          DB_PASSWORD=$(openssl rand -base64 16 | tr -d "=\/\+")
          ADMIN_PASS=toknless

          # Setup MariaDB for Panel
          sudo mysql -e "CREATE USER 'pterodactyl'@'127.0.0.1' IDENTIFIED BY '${DB_PASSWORD}';"
          sudo mysql -e "CREATE DATABASE pterodactyl;"
          sudo mysql -e "GRANT ALL PRIVILEGES ON pterodactyl.* TO 'pterodactyl'@'127.0.0.1' WITH GRANT OPTION;"

          # Download and configure Panel
          sudo mkdir -p /var/www/pterodactyl
          cd /var/www/pterodactyl
          sudo curl -Lo panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz
          sudo tar -xzvf panel.tar.gz
          sudo rm -f panel.tar.gz
          sudo cp .env.example .env
          sudo composer install --no-dev --optimize-autoloader

          sudo php artisan key:generate --force
          sudo php artisan p:environment:setup -n --author=admin@example.com --url=http://${PANEL_IP} --cache=redis --session=redis --queue=redis --redis-host=127.0.0.1 --redis-port=6379
          sudo php artisan p:environment:database -n --host=127.0.0.1 --port=3306 --database=pterodactyl --username=pterodactyl --password=${DB_PASSWORD}
          sudo php artisan migrate --seed --force
          sudo php artisan p:user:make --admin=1 --username=toknless --email=admin@example.com --name-first=Admin --name-last=User --password=${ADMIN_PASS}

          # Configure Nginx
          sudo sh -c 'cat > /etc/nginx/sites-available/pterodactyl.conf <<EOL
          server {
              listen 80;
              server_name '"$PANEL_IP"';
              root /var/www/pterodactyl/public;
              index index.html index.htm index.php;
              charset utf-8;
              location / { try_files \$uri \$uri/ /index.php?\$query_string; }
              location = /favicon.ico { access_log off; log_not_found off; }
              location = /robots.txt  { access_log off; log_not_found off; }
              access_log  /var/log/nginx/pterodactyl.app-access.log;
              error_log   /var/log/nginx/pterodactyl.app-error.log error;
              location ~ \.php$ {
                  fastcgi_split_path_info ^(.+\.php)(/.+)$;
                  fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
                  fastcgi_index index.php;
                  include fastcgi_params;
                  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                  fastcgi_param HTTP_PROXY "";
                  fastcgi_intercept_errors off;
                  fastcgi_buffer_size 16k;
                  fastcgi_buffers 4 16k;
              }
              location ~ /\.ht { deny all; }
          }
          EOL'
          sudo ln -s /etc/nginx/sites-available/pterodactyl.conf /etc/nginx/sites-enabled/pterodactyl.conf
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t
          sudo systemctl restart nginx

          # Insert API key (fixed: escape `key`)
          API_KEY=$(openssl rand -hex 32)
          sudo mysql -D pterodactyl -e "INSERT INTO application_api_keys (identifier, \`key\`, allowed_ips, created_at, updated_at) VALUES ('installer', '${API_KEY}', NULL, NOW(), NOW());"

          # Create Location & Node
          curl -s -X POST "http://${PANEL_IP}/api/application/locations" \
            -H "Authorization: Bearer ${API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"short":"local","long":"Local"}'

          NODE_JSON=$(curl -s -X POST "http://${PANEL_IP}/api/application/nodes" \
            -H "Authorization: Bearer ${API_KEY}" \
            -H "Content-Type: application/json" \
            -d "{
              \"name\":\"Node1\",
              \"location_id\":1,
              \"fqdn\":\"${NODE_IP}\",
              \"scheme\":\"http\",
              \"memory\":2048,
              \"disk\":10000,
              \"daemon_base\":\"/var/lib/pterodactyl/volumes\",
              \"daemon_sftp\":2022,
              \"daemon_listen\":8080
            }")

          NODE_ID=$(echo $NODE_JSON | jq -r '.attributes.id')

          # Wings setup
          sudo curl -s -X GET "http://${PANEL_IP}/api/application/nodes/${NODE_ID}/configuration" \
            -H "Authorization: Bearer ${API_KEY}" -o /etc/pterodactyl/config.yml
          sudo /usr/local/bin/wings --config /etc/pterodactyl/config.yml &

      - name: Install Cloudflare Tunnel
        run: |
          curl -fsSL https://pkg.cloudflare.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloudflare-main.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt-get update && sudo apt-get install -y cloudflared
          echo "${{ secrets.CF_TUNNEL_TOKEN }}" | sudo cloudflared service install
          sudo systemctl enable cloudflared
          sudo systemctl restart cloudflared

      - name: Keep VPS alive
        run: sleep 20700  # ~5h45m

      - name: Backup VPS data
        run: |
          echo "ðŸ’¾ Starting backup process..."
          sudo mkdir -p /opt/vps-backup/data
          if [ -d /var/www/pterodactyl ]; then
            sudo rsync -a --delete /var/www/pterodactyl/ /opt/vps-backup/data/panel/
            DB_PASS=$(grep '^DB_PASSWORD=' /var/www/pterodactyl/.env | cut -d'=' -f2 | sed "s/['\"]//g")
            sudo mysqldump pterodactyl --user=pterodactyl --password="${DB_PASS}" > /opt/vps-backup/data/pterodactyl.sql
          fi
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            sudo cp /var/lib/tailscale/tailscaled.state /opt/vps-backup/data/
          fi
          if [ -d /etc/cloudflared ]; then
            sudo cp -r /etc/cloudflared /opt/vps-backup/data/cloudflared
          fi
          sudo chown -R $USER:$USER /opt/vps-backup
          zip -r backup.zip /opt/vps-backup

      - name: Upload VPS backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup
          path: backup.zip
          retention-days: 1
